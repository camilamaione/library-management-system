/**
 * This class implements the controller for the view described by LibrarianFormScreen.fxml file.
 * @author Camila Maione 
 */

package GUI;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import GUI.listeners.Notifier;
import GUI.utils.Alerts;
import GUI.utils.Constraints;
import GUI.utils.Utils;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import model.entities.Librarian;
import model.services.AdminService;

public class LibrarianFormScreenController {

	@FXML private Button btSave; // Save button
	@FXML private Button btReset; // Reset button
	@FXML private TextField txtFieldName; // Where user will input name
	@FXML private TextField txtFieldEmail; // Where user will input e-mail
	@FXML private TextArea txtFieldAddress; // Where user will input address
	@FXML private TextField txtFieldCity; // Where user will input city
	@FXML private TextField txtFieldContact; // Where user will input contact
	@FXML private Label labelLibrarianName; // If editing a librarian, this label shows the name of the librarian being edited
	@FXML private Label labelMessage; // Show if user is either adding a new librarian or editing an existing one
	@FXML private Label labelNameError; // Label for showing errors with the input name
	@FXML private Label labelEmailError; // Label for showing errors with the input email
	@FXML private Label labelContactError; // Label for showing errors with the input contact
	
	private AdminService adminService = new AdminService();
	private Librarian librarian;

	/**
	 * Initializes the controller.
	 * @param librarian A Librarian object whose data will be changed (or not) after
	 * user finishes using the screen. If null, then the screen is for adding a new
	 * librarian object to the database.
	 */
	public void init(Librarian librarian) {
		this.librarian = librarian;
		if (librarian != null) {
			labelMessage.setText("Editing profile information of: ");
			labelLibrarianName.setText(librarian.getName());
			initTextFieldTexts();
		} else {
			labelMessage.setText("Please insert information for the new librarian in the fields below.");
		}
		// Set constraints for the text fields
		Constraints.setTextFieldLetters(txtFieldName);
		Constraints.setTextFieldInteger(txtFieldContact);
	}

	/**
	 * Set the initial values for the text fields to be input by the user, which are either
	 * the data stored in the global Librarian object (in case of editing) or blank values (in case of
	 * adding).
	 */
	private void initTextFieldTexts() {
		if (librarian != null) {
			txtFieldName.setText(librarian.getName());
			txtFieldEmail.setText(librarian.getEmail());
			txtFieldAddress.setText(librarian.getAddress());
			txtFieldCity.setText(librarian.getCity());
			txtFieldContact.setText(String.valueOf(librarian.getContact()));
		} else {
			txtFieldName.setText("");
			txtFieldEmail.setText("");
			txtFieldAddress.setText("");
			txtFieldCity.setText("");
			txtFieldContact.setText("");
		}
	}

	/**
	 * Actions performed when the user fires the Reset button.
	 * @param event ActionEvent generated by the button.
	 */
	@FXML public void onBtResetAction(ActionEvent event) {
		resetErrorLabels();
		initTextFieldTexts();
	}

	/**
	 * Actions performed when the user fires the Save button.
	 * @param event ActionEvent generated by the button.
	 */
	@FXML public void onBtSaveAction(ActionEvent event) {
		// Reseting error labels
		resetErrorLabels();

		// Search for possible errors in input values
		Map<String, String> errors = checkInputValuesErrors();

		// If there are errors, error labels are updated
		if (!errors.isEmpty()) {
			showErrorLabels(errors);
		// Otherwise and upon confirmation from the user, save changes or add new librarian
		} else {
			// Get confirmation from user
			Optional<ButtonType> option;
			if (librarian == null) {
				librarian = new Librarian();
				String msg = "Name: " + txtFieldName.getText() + 
						"\nE-mail: " + txtFieldEmail.getText() + 
						"\nAddress: " + txtFieldAddress.getText() + 
						"\nCity: " + txtFieldCity.getText() + 
						"\nContact: " + txtFieldContact.getText() + 
						"\n\nAre you sure to add this librarian?";
				option = Alerts.showConfirmation("Add new librarian", msg);				
			} else		
				option = Alerts.showConfirmation("Edit Librarian", "Are you sure to edit this librarian's information?");
			/* If user consent, update the global Librarian object attributes according to 
			 * the input values */
			if (option.get() == ButtonType.OK) {				
				librarian.setName(txtFieldName.getText());
				librarian.setEmail(txtFieldEmail.getText());
				librarian.setAddress(txtFieldAddress.getText());
				librarian.setCity(txtFieldCity.getText());
				librarian.setContact(Long.parseLong(txtFieldContact.getText()));

				// Call service to persist the changes in the object or add a new object
				if (librarian.getId() == null) {
					adminService.registerLibrarian(librarian);
					Alerts.showAlert("Add new librarian", null, "Librarian added.", AlertType.INFORMATION);
				} else {
					adminService.updateLibrarian(librarian);
					Notifier.notifyLibrarianDataChangeListeners();
					Alerts.showAlert("Edit librarian", null, "Librarian's information updated.", AlertType.INFORMATION);
				}
				// Notify listeners about a change occurred in librarians data
				Notifier.notifyLibrarianDataChangeListeners();
				Utils.currentStage(event).close();
			}
		}
	}

	/**
	 * Updates and display the error labels in the view, in case there are any.
	 * @param errors A Map<String, String> containing pairs of error identifications 
	 * and messages to be displayed by the error label.
	 */
	private void showErrorLabels(Map<String, String> errors) {
		if (errors.containsKey("name"))
			labelNameError.setText(errors.get("name"));
		if (errors.containsKey("email"))
			labelEmailError.setText(errors.get("email"));
		if (errors.containsKey("contact"))
			labelContactError.setText(errors.get("contact"));
	}

	/**
	 * Hide all error labels from the view.
	 */
	private void resetErrorLabels() {
		labelNameError.setText("");
		labelEmailError.setText("");
		labelContactError.setText("");
	}

	/**
	 * Search for any errors in the input values and store them in a map to be 
	 * retrieved.
	 * @return A Map<String, String> containing pairs of error identifications 
	 * and the messages to be displayed by the error label.
	 */
	private Map<String, String> checkInputValuesErrors() {
		Map<String, String> errors = new HashMap<>();

		// Input name cannot be null
		String inputName = txtFieldName.getText();
		if (inputName == null || inputName.equals(""))
			errors.put("name", "(Can't be empty)");

		// Input email cannot be null nor invalid
		String inputEmail = txtFieldEmail.getText();
		if (!inputEmail.contains("@") || inputEmail.charAt(0) == '@'
				|| inputEmail.charAt(inputEmail.length() - 1) == '@')
			errors.put("email", "(Invalid e-mail format)");
		if (inputEmail == null || inputEmail.equals(""))
			errors.put("email", "(Can't be empty)");

		// Input contact cannot be null
		String inputContact = txtFieldContact.getText();
		if (inputContact == null || inputContact.equals(""))
			errors.put("contact", "(Can't be empty)");

		return errors;
	}
}
